2 pipes 2 process(Not works)

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

int main() {
    int pipe1[2], pipe2[2];
    pid_t pid1, pid2, pid3;

    // Create first pipe
    if (pipe(pipe1) == -1) {
        perror("pipe1 failed");
        exit(1);
    }

    // Create second pipe
    if (pipe(pipe2) == -1) {
        perror("pipe2 failed");
        exit(1);
    }

    // First child process (e.g., ps)
    if ((pid1 = fork()) == 0) {
        dup2(pipe1[1], STDOUT_FILENO); // Redirect stdout to pipe1
        close(pipe1[0]); // Close unused read end
        close(pipe1[1]); // Close write end
        execlp("ps", "ps", NULL);
        perror("execlp ps failed");
        exit(1);
    }

    // Second child process (e.g., grep)
    if ((pid2 = fork()) == 0) {
        dup2(pipe1[0], STDIN_FILENO);  // Redirect stdin to pipe1
        dup2(pipe2[1], STDOUT_FILENO); // Redirect stdout to pipe2
        close(pipe1[1]); // Close unused write end
        close(pipe1[0]); // Close read end
        close(pipe2[0]); // Close unused read end
        execlp("grep", "grep", "bash", NULL);
        perror("execlp grep failed");
        exit(1);
    }

    // Third child process (e.g., sort)
    if ((pid3 = fork()) == 0) {
        dup2(pipe2[0], STDIN_FILENO);  // Redirect stdin to pipe2
        close(pipe2[1]); // Close unused write end
        close(pipe1[0]); // Close pipe1 ends
        close(pipe1[1]);
        execlp("sort", "sort", NULL);
        perror("execlp sort failed");
        exit(1);
    }

    // Close all pipe ends in the parent
    close(pipe1[0]);
    close(pipe1[1]);
    close(pipe2[0]);
    close(pipe2[1]);

    // Wait for all child processes to finish
    wait(NULL);
    wait(NULL);
    wait(NULL);

    return 0;
}

2 pipes 3 process

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

int main() {
    int pipe1[2], pipe2[2];
    pid_t pid1, pid2, pid3;

    // Create first pipe
    if (pipe(pipe1) == -1) {
        perror("pipe1 failed");
        exit(1);
    }

    // Create second pipe
    if (pipe(pipe2) == -1) {
        perror("pipe2 failed");
        exit(1);
    }

    // First child process (e.g., ls)
    if ((pid1 = fork()) == 0) {
        dup2(pipe1[1], STDOUT_FILENO); // Redirect stdout to pipe1
        close(pipe1[0]); // Close unused read end
        close(pipe1[1]); // Close write end
        execlp("ls", "ls", NULL);
        perror("execlp ls failed");
        exit(1);
    }

    // Second child process (e.g., grep)
    if ((pid2 = fork()) == 0) {
        dup2(pipe1[0], STDIN_FILENO);  // Redirect stdin to pipe1
        dup2(pipe2[1], STDOUT_FILENO); // Redirect stdout to pipe2
        close(pipe1[1]); // Close unused write end
        close(pipe1[0]); // Close read end
        close(pipe2[0]); // Close unused read end
        execlp("grep", "grep", ".c", NULL);
        perror("execlp grep failed");
        exit(1);
    }

    // Third child process (e.g., sort)
    if ((pid3 = fork()) == 0) {
        dup2(pipe2[0], STDIN_FILENO);  // Redirect stdin to pipe2
        close(pipe2[1]); // Close unused write end
        close(pipe1[0]); // Close pipe1 ends
        close(pipe1[1]);
        execlp("sort", "sort", NULL);
        perror("execlp sort failed");
        exit(1);
    }

    // Close all pipe ends in the parent
    close(pipe1[0]);
    close(pipe1[1]);
    close(pipe2[0]);
    close(pipe2[1]);

    // Wait for all child processes to finish
    wait(NULL);
    wait(NULL);
    wait(NULL);

    return 0;
}

wait pid 
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>

int main() {
    pid_t pid;
    int status;

    // Create a child process
    pid = fork();

    if (pid < 0) {
        // Fork failed
        perror("Fork failed");
        exit(1);
    } else if (pid == 0) {
        // Child process
        printf("Child process (PID: %d) is running...\n", getpid());
       
        // Simulate some work in the child process
        exit(42); // Exit with status 42
    } else {
        // Parent process
        printf("Parent process (PID: %d) waiting for child (PID: %d)...\n", getpid(), pid);

        // Wait for the child process to terminate
        waitpid(pid, &status, 0);

        // Check if the child terminated normally
        if (WIFEXITED(status)) {
            int exitStatus = WEXITSTATUS(status);
            printf("Child terminated normally with exit status: %d\n", exitStatus);
        } else if (WIFSIGNALED(status)) {
            int termSignal = WTERMSIG(status);
            printf("Child terminated by signal: %d\n", termSignal);
            if (WCOREDUMP(status)) {
                printf("A core dump was produced.\n");
            }
        } else if (WIFSTOPPED(status)) {
            int stopSignal = WSTOPSIG(status);
            printf("Child process is stopped by signal: %d\n", stopSignal);
        }
    }

    return 0;
}